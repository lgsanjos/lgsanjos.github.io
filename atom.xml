<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lgsanjos' Blog]]></title>
  <link href="http://lgsanjos.github.io/atom.xml" rel="self"/>
  <link href="http://lgsanjos.github.io/"/>
  <updated>2015-09-11T15:31:15-03:00</updated>
  <id>http://lgsanjos.github.io/</id>
  <author>
    <name><![CDATA[lgsanjos]]></name>
    <email><![CDATA[lgsanjos@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Understanding Promises]]></title>
    <link href="http://lgsanjos.github.io/blog/2015/09/10/understanding-promises/"/>
    <updated>2015-09-10T11:19:39-03:00</updated>
    <id>http://lgsanjos.github.io/blog/2015/09/10/understanding-promises</id>
    <content type="html"><![CDATA[<p>Promise is an specification to handle async calls. There are several ways to solve this problem a very popular solution is using callback arguments. In this article I will introduce promises and do a shallow comparison of both solutions.</p>

<!-- more -->


<h1>The problem</h1>

<p>Imagine you need to request some data from a server and once you have the response, you will format this data and display into the screen.</p>

<p>For the sake of simplicity and abstraction, let&rsquo;s consider:
- The method &ldquo;asyncRequest()&rdquo; that will request some data from an endpoint.
- Only success case for now, later on we add error handling.</p>

<h2>Using callback</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">asyncRequest</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// success </span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Using promises</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">asyncRequest</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="c1">// success</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>So what?</h2>

<p>At first glance it&rsquo;s not a big change, but looking more carefully in fact what is happening on the promise example is that the asyncRequest is not triggering the callback function instead it is returning an object that implements the method <strong>then</strong>, and this object (which is called promise) will trigger once it&rsquo;s fullfilled.</p>

<p>Let&rsquo;s keep the baby steps and not dive too fast. So now that we have the response we need to validade this data sending this to another service, to do so we will call asynValidation(data).</p>

<h2>Using callback</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">asyncRequest</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// asyncRequest succeded </span>
</span><span class='line'>  <span class="nx">asyncValidation</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// asyncValidation succeded</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Using promises</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">asyncRequest</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">asyncValidation</span><span class="p">)</span>
</span><span class='line'>              <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                  <span class="c1">// asyncValidation succeded</span>
</span><span class='line'>              <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Whaaaaaaat?</h2>

<p>Now we are talking, so the benefit of delegating the event triggering is that you can build a chain of execution, and whatever asycnRequest return will be passed as argument to asyncValidation.</p>

<p>To better undestanding, let&rsquo;s think on a possible implementation of the asyncRequest method.</p>

<h2>Using callback</h2>

<p>Ok, this is such a bummer, but I don&rsquo;t want to mess up with any HTTP API, instead I will use a setTimeout to simulate an async process.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">asyncRequest</span> <span class="p">(</span><span class="nx">successCallback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// do the request using an API</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">response</span> <span class="o">=</span> <span class="s1">&#39;some data&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>     <span class="nx">successCallback</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span> <span class="mi">2000</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Using promises</h2>

<p>The example below the variable <strong>q</strong> is a promise library, I will get into it below.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">asyncRequest</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Create a deferred which is the object that will trigger the callback</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">deffered</span> <span class="o">=</span> <span class="nx">q</span><span class="p">.</span><span class="nx">deferred</span><span class="p">();</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">response</span> <span class="o">=</span> <span class="s1">&#39;some data&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// here we say that the promise should be fullfilled as success</span>
</span><span class='line'>    <span class="nx">deffered</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span> <span class="mi">2000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="k">return</span> <span class="nx">deffered</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Enlightening</h2>

<p>The variable <strong>q</strong> is the library that implements a promise solution, when called .deferred it will create a <em>promise manager</em>, I know that&rsquo;s not the best name, but think that this manager owns the promise and also dictated if it will succeed or fail.</p>

<p>Notice that it returns <strong>deferred.promise</strong>, which is the promise itself. Yet there is no definition of success or fail, it is called <strong>pending promise</strong>.</p>

<p>Once the timeout executes the deferred will trigger <strong>.resolve(response)</strong> which is the way to say, this promise succeded, go on with the chain and use this response variable as parameter to the next method.</p>

<p>It means that as soon as the promise is resolved the <strong>then</strong> method will be invoked and it&rsquo;s function will be called.</p>

<h2>Chaining</h2>

<p>Chaining is only possible because the <strong>then</strong> method also retuns a promise, thats will be triggered automatically once it&rsquo;s function is done and it&rsquo;s return value will be carried over to the next function as parameter, so you can do thigs like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">openSpinnerModal</span><span class="p">()</span>
</span><span class='line'>         <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">requestData</span><span class="p">)</span>
</span><span class='line'>         <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">validateData</span><span class="p">)</span>
</span><span class='line'>         <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">notifyUser</span><span class="p">)</span>
</span><span class='line'>         <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">closeSpinnerModal</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Failure handling example</h2>

<p>Adding a fail scenario to asyncRequest and asyncValidation.</p>

<h2>Using callback</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">asyncRequest</span><span class="p">(</span>
</span><span class='line'>  <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// success callback for asyncRequest</span>
</span><span class='line'>   <span class="nx">asyncValidation</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>     <span class="c1">// success callback for asyncValidation</span>
</span><span class='line'>     <span class="p">},</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>       <span class="c1">//fail callback for asyncValidation</span>
</span><span class='line'>     <span class="p">})</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="kd">function</span> <span class="p">(</span><span class="nx">exception</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// fail callback for asyncRequest</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Refactoring to a little bit:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">failCallback</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">exception</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// fail callback for asyncRequest</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">successCallback</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">asyncValidation</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>     <span class="c1">// success callback</span>
</span><span class='line'>     <span class="p">},</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>       <span class="c1">//fail callback</span>
</span><span class='line'>     <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Using promises</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">asyncRequest</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">asyncValidation</span><span class="p">,</span> <span class="nx">failCallbackForAsyncRequest</span><span class="p">)</span>
</span><span class='line'>             <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">successForAsyncValidation</span><span class="p">,</span> <span class="nx">failForAsyncValidation</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>OR</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">asyncRequest</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">asyncValidation</span><span class="p">)</span>
</span><span class='line'>              <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">exception</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// Handle both failures here </span>
</span><span class='line'>              <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Shortest conclusion ever</h2>

<p>Chaining is a readable and expressive way to write code, I particularly keep using callbacks for very simple cases but when I notice that it requires me to execute one function after other, I go straight to chaining with promises.</p>

<p>Callbacks inside other callback is a problem well known as <strong>callback hell</strong> this is a good enough reason to give a try for promises.</p>

<p>Also there is much more the <strong>then</strong> and <strong>catch</strong> but it depends on the implementation you will use.
Another useful method is <strong>.finally()</strong> as it sounds like will always execute as the last element of the chain.</p>

<hr />

<h2>Links</h2>

<p>Hope you have enjoyed and be curious enough to take a look at the promise definition:</p>

<ul>
<li><p><strong>A+</strong> <a href="http://promisesaplus.com">http://promisesaplus.com</a></p></li>
<li><p>And some of it&rsquo;s implementations:</p>

<ul>
<li><strong>Kriskowal</strong> q: <a href="https://github.com/kriskowal/q">https://github.com/kriskowal/q</a></li>
<li><strong>AngularJS</strong> implementation $q: <a href="https://docs.angularjs.org/api/ng/service/$q">https://docs.angularjs.org/api/ng/service/$q</a></li>
<li>More <strong>references</strong> on: <a href="https://promisesaplus.com/implementations">https://promisesaplus.com/implementations</a></li>
</ul>
</li>
</ul>


<h2>Extra</h2>

<p>The original problem presented here is a piece of a general topic named &ldquo;Communicating Sequential Process&rdquo;, you can check more if it here <a href="https://en.wikipedia.org/wiki/Communicating_sequential_processes">https://en.wikipedia.org/wiki/Communicating_sequential_processes</a> and also some other solutions other than promises and callbacks are listed below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Goal - Theory of constraints]]></title>
    <link href="http://lgsanjos.github.io/blog/2015/08/23/the-goal-theory-of-constraints/"/>
    <updated>2015-08-23T17:32:30-03:00</updated>
    <id>http://lgsanjos.github.io/blog/2015/08/23/the-goal-theory-of-constraints</id>
    <content type="html"><![CDATA[<p>The book tells a story about a factory manager that has an incredibly short deadline of three months to transform the site from a negative ballance and low customer satisfaction into profitable. Meanwhile he has some issues at home with wife and kids and meet an old professor that end up coaching him in the process of change.</p>

<p>The concepts of the theory of constraints are introduced naturally throughout the book as the story goes on, here are my highlights.</p>

<!-- more -->


<h2>Detailed version</h2>

<h3>What&rsquo;s your goal?</h3>

<p>When professor {name} asked the factory manager what was the goal, it shows clearly how the stress, short-term-goals and deadlines obfuscate the real goal. {name} guesses the goal was to be as productive as possible, later to satisfy the costumer, quality later on came tothe answer for every company, to make money.</p>

<p>This sounds trivial and useless but it&rsquo;s a good reflection to keep in mind the long-term-goals or else the stress leads a manager to do only what is behind the schedule, reduce quality and others workarounds that will never end.</p>

<p>Meanwhile I was reading this whole procces to understand the company goals I reflected to myself, what is my goal? In life, in my career, on my family where I&rsquo;m heading to, what I&rsquo;m doing to get there and what are the workarounds that I&rsquo;m doing or what is justified by &ldquo;it was always done like this&rdquo;.</p>

<h3>Correct measurement</h3>

<p>Once the goal is clear, the manager must measure the progress towards to the goal. Just like in real world the his company had certain amount of rules and reports that should cover this, but it wasn&rsquo;t. In the end what helped was.</p>

<ul>
<li>Throughput:</li>
<li>Operational cost:</li>
<li>Inventory:</li>
</ul>


<h3>Demand</h3>

<h3>Watch out for local optimization</h3>

<p>Using the book&rsquo;s example, the whole organization were relying on new robots to replace human labor, so it would increase the productivity of the plant. But it&rsquo;s not necessaraly true, this is a local optimization the robots will replace a single piece of the work.</p>

<p>To achieve good results one must identify all steps of the production line, and identify the produtivity of each one individually this will lead to better understand the bottle necks or the areas that must be optimized.</p>

<ul>
<li>So first, identify all the steps from receiving the inputs until delivering it to the costumer.</li>
<li>Then, it&rsquo;s obvious wheter one step produces fewer output than the rest, the follwing steps will be slowed down. To have a good productivity all the steps must be equally productive.</li>
</ul>


<h3>Identify dependencies cross process</h3>

<p>Imagine a turn based game, where five players will play always in same order. The game consist in moving match sticks across bowls (simulating a production line). The first player throw the dice, the number it gets will be the amount of matches passed to the next player&rsquo;s bowl. Then second player throw a dice and lets say it is a four, but there are only two match sticks on the bowl, those two will be passed to the next player.</p>

<p>This game represents a process of production line and has some factors like a dice, that is a random number which represents statistical flutuations. Statistical flutuations are variables that are impossible to track because they simple vary all the time, for instance an employee productivity varies based on his/her mood, health, stress and several other factors that can&rsquo;t be predicted nor controlled.</p>

<p>Also the game contains dependents events, it&rsquo;s clearly that the first player will move much more matches than the last one. If you consider this as a productivity index, well we know who will be promoted. And this analogy shows how unfair and ineficent dependencies can be.</p>

<p>The company goal is to move matches all across the bowls, each employee tries to get a six on the dice but often it&rsquo;s not enough because there is no match on the bowl. To achieve the goal minimize the statistical flutuations is a good idea but not always a choice. In the game instead using the dice if always were moved the average three  matches it would be a linear productivity, much better.</p>

<p>Dependent events with this kind of variation</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Win Friends and Influence People -  Dale Carnegie]]></title>
    <link href="http://lgsanjos.github.io/blog/2015/06/06/how-to-win-friends-and-influence-people/"/>
    <updated>2015-06-06T14:00:52-03:00</updated>
    <id>http://lgsanjos.github.io/blog/2015/06/06/how-to-win-friends-and-influence-people</id>
    <content type="html"><![CDATA[<p>This is a best seller and a must read for people who wants to improve their soft skills, better approach and understand  people in a vast different scenarios.
Here are my notes taken by chapter.</p>

<!-- more -->


<h1>Side notes</h1>

<h3>Part1:</h3>

<h4>Fundamental techniques in handling people</h4>

<ul>
<li><p>If you want to gather honey, don&rsquo;t kick over the beehive
. Don&rsquo;t criticize people instead incentive them to do differently.
. Assume poeple their best in that situation because we never know the whole context to judge.
. &ldquo;Don&rsquo;t criticize them. They are just what we would be under similar cricumstances.&rdquo;</p></li>
<li><p>The big secret of dealing with people</p></li>
<li>Sigmund Freud said &ldquo;Everything you and I do springs from two motives: the sex urge and the desire to be great.&rdquo;

<ul>
<li>The only way to make people do something is making them wanting to do so.</li>
<li>Watch out for friends that flatters you. Flattery is telling a person precisely what he/she thinks of himself/herself.</li>
</ul>
</li>
<li>Give sincere appreciation.</li>
<li>He who can do this has the whole wolrd with him. He who cannot walks a lonely way</li>
<li>People are interested in what they want.

<ul>
<li>The only way to influence people is to talk about what they want and how to get it.</li>
<li>if there is any secret of success it lies in the ability to get the other person&rsquo;s point of view and see thing from that person&rsquo;s angle as well as from your own.</li>
</ul>
</li>
</ul>


<h3>Part2:</h3>

<h4>Six ways to make people like you</h4>

<ol>
<li>Do this and you&rsquo;ll be welcome anywhere</li>
<li>Dog is the only animal which does not work for living. It get&rsquo;s everthing by giving love.

<ul>
<li>The most used word is &ldquo;I&rdquo;.</li>
<li>We like people that admire us.</li>
<li>&ldquo;its the individual who is not interested in his fellow men who has the greatest diffculties in life and provides the greatest injury to others.&rdquo;</li>
</ul>
</li>
<li><p>Poeple are deeply interest in their own world, if you care about it too they will listen and care about you.</p>

<ul>
<li>&ldquo;We are interested in others when they are interested in us&rdquo;- Publilius Syrus</li>
<li>Become genuinely interested in other people.</li>
</ul>
</li>
<li><p>A simple way to make a good first impression</p></li>
<li><p>Hapiness is always welcome anywhere.</p>

<ul>
<li>Actions speak louder than words. A smile says &ldquo;I&rsquo;m glad to see you&rdquo;.</li>
<li>Smile even when on the phone. Smiles influences your voice.</li>
<li>Never foce a smile. It&rsquo;s completely noticeable and creates a worse impression.</li>
<li>Greet and approach people with a smile and it helps people to associate you as someone who brings hapiness and wellness.</li>
</ul>
</li>
<li><p>If you don&rsquo;t do this, you are headed for trouble</p></li>
<li><p>One&rsquo;s own name is the sweetest word he/she can hear.</p>

<ul>
<li>Remember people&rsquo;s name and pronunciate/spell it correctly.</li>
</ul>
</li>
<li><p>An easy way to become a good conversationalist</p></li>
<li><p>To be a good conversationalist you must be a good listener.</p>

<ul>
<li>Remember, we like people that are interested in us. So to be an interesting pearson be interested in others.</li>
<li>You can make more friends in two months admiring others than in two years promoting yourself.</li>
<li>Encourage people to talk about themselves.</li>
</ul>
</li>
<li><p>How to interest people</p></li>
<li><p>The royal road to a person&rsquo;s heart is to talk about things he/she treasures most.</p>

<ul>
<li>Try to find what interest people and talk about it, people will be interested in you.</li>
<li>Talk in terms of the others person&rsquo;s interest.</li>
</ul>
</li>
<li><p>How to make people like you instantly</p></li>
<li>Remember that everyone want feel important.

<ul>
<li>You don&rsquo;t have to take credit for decisions.</li>
</ul>
</li>
</ol>


<h3>Part 3:</h3>

<h4>How to win people to your way of thinking</h4>

<ol>
<li>You can&rsquo;t win an argument</li>
<li><p>The best way to approach an argument is to avoid the argument.</p>

<ul>
<li>If you proven someone is wrong it will hurt their pride and feeling of importance, it&rsquo;s not constructive.</li>
<li>A conflict is never ended by an argument but by tact and diplomacy.</li>
<li>When someone argues and bring some different point of view, recognizes and show appreciation to minimize the stress.</li>
<li>When people yell at each other, it&rsquo;s not communication it&rsquo;s just noise.</li>
<li>Look for areas of agreement.</li>
<li>Divergent ideas usually means different points of view, try to understand the other&rsquo;s point of view not to prove you are right.</li>
<li>When you disagree and an argument seems near, listen first. Do try to understand deeply what the other is saying instead of judge as wrong.</li>
</ul>
</li>
<li><p>A sure way of making enemies - And how to avoid it</p></li>
<li>A sure way of making enemies is telling they are wrong, know nothing. It deeply hurts the feeling of importance and self pride.

<ul>
<li>Even when sure of what you are going to say, offer the idea as a suggestion never pushes it. When an idea is pushed it means &ldquo;I&rsquo;m better than you&rdquo;.</li>
<li>Respect other&rsquo;s opinions and treat them courteously.</li>
</ul>
</li>
<li><p>Always use diplomacy.</p></li>
<li><p>If you are wrong, admit it</p></li>
<li>Admit it quickly and emphatically</li>
<li><p>Be humble and people will have a forgiving attitude towards you.</p></li>
<li><p>A drop of honey</p></li>
<li><p>“So with men, if you would win a man to your cause, first convince him that you are his sincere friend”</p>

<ul>
<li>Start negotiation in a friendly way and it will influence on the other&rsquo;s judgment.</li>
<li>We like to help friends and people who care about us, it&rsquo;s clever to be friendly with people so in need a help is more likely to come.</li>
</ul>
</li>
<li><p>The secret of socrates</p></li>
<li><p>When starting a conversation, talk about in common points not on divergences. Emphasizes what you have in common.</p>

<ul>
<li>This feeling of being right is very powerful and should take place before the divergences.</li>
<li>Try to keep your opponent saying &ldquo;yes, yes&hellip; yes&rdquo; instead of &ldquo;no&rdquo;. Once a &ldquo;no&rdquo; takes place, a pearson will try to remain consistent with that for sake of pride.</li>
</ul>
</li>
<li><p>The safety valve in handling complaints</p></li>
<li><p>When complaining people have a stream of thoughts that wants to talk about. Never interrupt them, listen everything first, wait the other&rsquo;s person finishes first.</p>

<ul>
<li>Encourage them to express themselves.</li>
<li>Let the other person do a great deal of the talking.</li>
</ul>
</li>
<li><p>How to get cooperation</p></li>
<li><p>People like to buy but not to be sold. Most people prefer to feel that they are actiong on their own ideas not on what were sold to them.</p>

<ul>
<li>Let the others take credits for ideas.</li>
<li>Ask for theirs ideas or advice about something.</li>
</ul>
</li>
<li><p>A formula that will work wonders for you</p></li>
<li><p>Do not condemn someone for being wrong.</p>

<ul>
<li>Put yourself in other&rsquo;s shoes and try to figure out why they act how they do or why they would say something like they did.</li>
<li>If there is any secret of success it lies on see through someone&rsquo;s point of view as clear as ours point.</li>
</ul>
</li>
<li><p>What everybody wants</p></li>
<li><p>Three-fourths of the people you meet want sympathy. Give it to them and they will love you.</p>

<ul>
<li>Before you speak back to someone who has offended you or is debating you, remember to try and react differently than just anyone would. Respond how a wise person would react, not just any fool.</li>
</ul>
</li>
<li><p>An appeal that everybody likes</p></li>
<li><ol type="a">
<li>Pierpont Morgan said: &ldquo;Rverybody usually has two reasons for doing anything: one that sounds good, and then their real reason.&rdquo;.</li>
<li>Use noble motives that impacts other people. Like mother&rsquo;s love, children education, environment or any noble cause that people share.</li>
</ol>
</li>
<li><p>The movies do it. Tv Does it. Why don&rsquo;t you do it?</p></li>
<li><p>Drama. Dramatize your ideas it turns out to be more interesting and get more attention.</p></li>
<li><p>When nothing else works, try this</p></li>
<li>People love the chance to express themselves, their worth, and to show their importance. So listen to them.

<ul>
<li>Keep the door open to people approach you.</li>
<li>Stimulate competition so people will try to outreach to prove themselves. It&rsquo;s better than pointing fingers with no constructive meaning.</li>
</ul>
</li>
</ol>


<h3>Part 4:</h3>

<h4>Be a leader: How to change people without giving offense or arousing resentment</h4>

<ol>
<li>If you must find fault, this is the way to begin</li>
<li><p>Praise before the bad news.</p>

<ul>
<li>If you are firing someone tell he/she the bright side first and sinceres praise before firing itself. It avoid the feeloing that the decision were personal.</li>
<li>Imagine a dentist about to perform drilling. Yes, the patient is about to get drilled, but the dentist gives him Novacain to dull the pain.</li>
</ul>
</li>
<li><p>How to criticize - and not be hated for it</p></li>
<li><p>It&rsquo;s common to start with a sincere praise followed by a &ldquo;but&rdquo;. When heard this poeple might doubt about the praises. It&rsquo;s better to use the word &ldquo;and&rdquo; and continue with no direct criticism instead encourage to the right way</p>

<ul>
<li>The praise now comes off as sincere and may make that person want to live up to our expectations.</li>
</ul>
</li>
<li><p>Talk about you own mistakes first</p></li>
<li><p>It feels a lot better to hear someone talk about their faults and kind of “get down on your level” in a sense before they point out yours.</p>

<ul>
<li>Admiting your failures is a humble act. Poeple will feel safe to share theirs as well.</li>
<li>Also it encourages people to analyze their failures and change their behavior.</li>
</ul>
</li>
<li><p>No one likes to take orders</p></li>
<li>Giving suggestions instead of giving orders is much more effective and seve person&rsquo;s pride.

<ul>
<li>Asking questions instead of ordering make people to feel they are participating in the decisions and are effective.</li>
</ul>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why we still talk about Agile?]]></title>
    <link href="http://lgsanjos.github.io/blog/2015/05/30/why-we-still-talk-about-agile/"/>
    <updated>2015-05-30T14:53:52-03:00</updated>
    <id>http://lgsanjos.github.io/blog/2015/05/30/why-we-still-talk-about-agile</id>
    <content type="html"><![CDATA[<p><br /></p>

<p>"Our team has grown too much. We are twelve engineers now, agile says we should be nine or less"</p>


<h4>  - Said Tom, after realize more engineers will join the team.</h4>


<p><br /></p>

<p>"We have code on branches that weren't merge to trunk, this is against continuous delivery, we are not agile!"</p>


<h4>  - Said Katherine during a retrospective about the process.</h4>


<p><br /></p>

<p>"Someone broke the build and it's blocking us! I can't check in my changes so this story will be carried over."</p>


<h4>  - Said Paul, one day before the iteration end.</h4>




<!-- more -->


<p><br /></p>

<p><b>Does this sounds familiar to you?</b> In our every-working-day we hear people complaining process that it is not agile enough, that the managers should be more flexible, the agile worlds says Y but the company does Z.</p>




<p>Sure there are also <b>companies trying to sell Agile all around</b>, claiming they are more afficient with a flexible and geekie environment.</p>


<p><br /></p>

<h1>What is not Agile?</h1>


<p><br /></p>

<p>At some point on the history, the software development started to spread among hobbist more and more until it becomes a professional area that had to be standardized. At that moment, building a software was analog to civil engineering, so the process of development were based on an apartmant building process.</p>




<p>It was a good practice to capture all the requirements, business details and write down a plan to action. Just like a building blue print, it was the documentation that would lead the execution.</p>


<p><br /></p>

<h4>There is a problem here, as you know after an appartment is done no one asks to add a new elevator on that small area on the hall.</h4>


<p><br /></p>

<p>And that's the reality on software business we need to maintain, and by maintain I mean, to add new features, to be up to date on external requirements, laws and etc.</p>


<p><br /></p>

<h1>Agile, the origins</h1>


<p><br /></p>

<p>Something had to be changed! The costumer would receive the software only when the whole project was complete, it takes so long that probably it is different than expected. And to fix is not that simple.</p>




<p>Sounds like a good idea to don't get too attached to a scope, big scopes are dangerous because increase the delivery time and decrease the chance of success. Do small projects, short releases, to <b>focus on delivering value</b>, instead of trying to predict - adapt to changes - starts to takes place over that <a href="http://en.wikipedia.org/wiki/Waterfall_model">waterfall process</a>.</p>




<p>In 2001 a group of renamed gurus started a new era and created <a href="http://agilemanifesto.org">The Agile Manifesto</a>. It came with a set of twelve principle that companies/teams are encouraged to follow as a sustainable way to build software.</p>


<p><br /></p>

<h4>"Our highest priority is to satisfy the customer through early and continuous delivery of valuable software." - Agile Manifesto</h4>


<p><br /></p>

<p>Perfect worlds to an imperfect world. No matter who: engineers, project manager, CTO, CEO, chairman, 10 in 10 will agree with this sentence. Because that's the ideal world, To satisfty the customer is the key for companies, who doesn't want that?</p>


<p><br /></p>

<h1>Why we still discuss it?</h1>


<p><br /></p>

<p>To satisfy means to attend someone expectations, it means that you are going to attend what your customer asks you. If you are one of those smarties you are thinking: "NO! I will do what they actually need".</p>


<p><br /></p>

<h4>What if your costumer does not want agile?</h4>


<p><br /></p>

<p>The business world is pretty far from the ideal world, sustainability means be profitable in first place and a happy customer is someone who will buy from you once again.</p>


<p></p>

<p>To push a philosophy (even acknowledged as something good for everyone) to your client is not a smart move. You are telling a banker that you will not sign a contract with dead line, instead you will demonstrated the software incrementally built every two weeks (called interation) and that "online bank system" will be updated in the end of every interation, it's called continuous delivery. <b>I'm not a banker but I would never buy this idea</b>.</p>


<p><br /></p>

<h1>How "Agile" are you?</h1>


<p><br /></p>

<p>If Agile is a philosofy, process are the execution. It sets the rules and organize people. There is set of well known proposals like: Scrum, XP, Crystal, lean and of course each company adapts to their reality.</p>




<p>In the end of the day, how agile is your company means how agile are the constraints you have. They directly depend of your business model, ie:</p>




<ul>
    <li><p><b>Consider SaaS company</b>, you probably have a set service that all costumers use, it means you have deadline with yourself. Change the process and no one is impacted, tell everyone to work from home and costumers will never miss them. You have few constraints.</p></li>

    <li><p><b>Consider a ERP or CRM product</b>, that each costumer has it's customizations with different deliveries and demands new feartures every now and then. Who is in charge now?</p></li>

    <li><p>What about a <b>company that writes software for airplanes</b> or a real time system, that require the highest quality, bugs are not acceptable and features rarely changes. It's very different right?</p></li>
</ul>



]]></content>
  </entry>
  
</feed>
