<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | lgsanjos' Blog]]></title>
  <link href="http://lgsanjos.github.io/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://lgsanjos.github.io/"/>
  <updated>2015-09-17T11:18:59-03:00</updated>
  <id>http://lgsanjos.github.io/</id>
  <author>
    <name><![CDATA[lgsanjos]]></name>
    <email><![CDATA[lgsanjos@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ReactJS for dummies]]></title>
    <link href="http://lgsanjos.github.io/blog/2015/09/14/reactjs-for-dummies/"/>
    <updated>2015-09-14T11:24:21-03:00</updated>
    <id>http://lgsanjos.github.io/blog/2015/09/14/reactjs-for-dummies</id>
    <content type="html"><![CDATA[<p>After almost two years working with AngularJS a new project came to me with few presentation rules but high performance was requires. So I took a look again on the frameworks around and decided to give a try for ReactJS. Here are my thoughts about it so far, and some quick explanation for those who never saw it before.</p>

<!-- more -->


<h2>A brief intro</h2>

<p>ReactJs is a tool developed by Facebook to generate and manipulate DOM (Document Object Model, it is a tree of objects that the browser produces when parse the HTML). You can think of ReactJS as the V on MVC, it does not provide you service layer nor controllers, nor routing by default. Sure there are plugins and ways o implement this but it&rsquo;s beyond the standard.</p>

<p>For now let&rsquo;s keep it simple and think on view only. React is very efficient mostly because  it keeps in memory it&rsquo;s own version of the DOM tree, it means that it reduces a lot the comunication between browser which apparently is expensive.</p>

<h2>What else?</h2>

<p>It drives you to encapsulate <strong>HTML</strong> and Javascript in components, let&rsquo;s say you have a table and a header that allow the user to reorder the collumns, in general manner you would select the table <strong>id</strong> and change the html order, without any regard of boundaries, you may implement the javascript in a separate file with a completely different name than the HTML. So we treat the whole HTML, CSS as global, right?</p>

<p>On ReactJS way, you would encapsulate the JS that manipulates that specific HTML in one component.</p>

<h2>But how does that look like?</h2>

<p>The simplest example:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="kd">var</span> <span class="nx">MyComponent</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// This is an API method that must be implemented and return the html that will be rendered</span>
</span><span class='line'><span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="nx">div</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">Hello</span> <span class="nx">world</span><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="err">/div&amp;gt;);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>What we can notice</h2>

<ul>
<li>Now we are using JS to generate html</li>
<li>A piece of html is being encapsulated inside a JS component</li>
<li>A piece of html is being returned as first class type</li>
<li>There are methods that API relies and are not obvious for me</li>
</ul>


<h2>Explanation</h2>

<p>First of all, this is not pure JS it is actually called JSX, so it should be precompiled to generate proper &ldquo;browser friendly input&rdquo;. How to precompile?
Well, you can use <strong>NodeJS</strong> as engine and a task executer like <strong>grunt</strong> or <strong>gulp</strong> that will trigger as part of deploy/test/preview task to apply the ReactJS precompiler.</p>

<p>This explain how you can return HTML, which in my opinion is great, so you can break down your render function calling other JS functions that also return HTML.</p>

<p>Sure there are also a few downsides, for instance the attribute <strong>class</strong> that we use to set a <strong>CSS</strong> class should be named as <strong>classFor</strong>, the reason is&hellip; well it&rsquo;s the way it is to work.</p>

<p>Some more examples:</p>

<h2>Using JS to populate the content</h2>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="kd">var</span> <span class="nx">MyComponent</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="kd">var</span> <span class="nx">toBeDisplayed</span> <span class="o">=</span> <span class="p">[</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Hello</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">world</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">my</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">friend</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;],</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">print</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">list</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">list</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">word</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">word</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">},</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">print</span><span class="p">(</span><span class="nx">toBeDisplayed</span><span class="p">)}</span><span class="o">&lt;</span><span class="err">/div&gt;);</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Hold on!</h2>

<p>It&rsquo;s <strong>not recommended</strong> to use variables inside component because components have the concept of state, and when a state change it assumes that the UI needs to be rerendered.
Take a look below:</p>

<h2>Changing the state and update the UI</h2>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="kd">var</span> <span class="nx">MyComponent</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// returns an object which contain all the state variable with default value</span>
</span><span class='line'>  <span class="nx">getInitialState</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>       <span class="nx">toBeDisplayed</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Default</span> <span class="nx">value</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span>
</span><span class='line'>     <span class="p">};</span>
</span><span class='line'>  <span class="p">},</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">updateDataAsync</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">toBeDisplayed</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">I</span> <span class="nx">changed</span> <span class="k">this</span> <span class="nx">data</span><span class="o">!&amp;</span><span class="nx">rsquo</span><span class="p">;;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">},</span> <span class="mi">2000</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">},</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// This is also from API, it triggers once the render is done</span>
</span><span class='line'>  <span class="nx">componentDidMount</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">updateDataAsync</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">toBeDisplayed</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;);</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Components composition and parameters</h2>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="kd">var</span> <span class="nx">FancyPrint</span> <span class="o">=</span> <span class="nx">Ract</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">text</span><span class="o">&lt;</span><span class="sr">/h1&gt;);&lt;br/</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="kd">var</span> <span class="nx">MyComponent</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="nx">FancyPrint</span> <span class="nx">text</span><span class="o">=</span><span class="s1">&#39;Hello world&#39;</span> <span class="o">/&amp;</span><span class="nx">gt</span><span class="p">;);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>this.props ?</h2>

<p>Yes, whatever you get as arguments are properties and you should handle them as constants inside your component, if you need to manipulate and change you better move the value to the State.</p>

<p>Also you can pass an event as property for sure.</p>

<h2>Overall</h2>

<ul>
<li>Component driven feels like building the HTML in a <strong>OO</strong> fashion.</li>
<li>Based on my experience I can tell you that there are very few situations which the standard attributes were changed and usually is easy to find references on internet.</li>
<li>One thing that bothers me is when special methods are triggered and is not clear to me the whole lifecycle, for React there are few events I&rsquo;ll show later.</li>
</ul>


<h2>Ok so far? Let&rsquo;s imagine&hellip;</h2>

<p>I won&rsquo;t write down the entire code here, it&rsquo;s not my intention to write a tutorial right now, but probably it will be my next post.</p>

<p>But what do you think, if your main page could look like this:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">MetadataHeader</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">scripts</span><span class="o">/</span><span class="nx">MetadatHeader</span><span class="p">.</span><span class="nx">js</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">PageHeader</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">scripts</span><span class="o">/</span><span class="nx">PageHeader</span><span class="p">.</span><span class="nx">js</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">SideMenu</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">scripts</span><span class="o">/</span><span class="nx">SideMenu</span><span class="p">.</span><span class="nx">js</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">MainContent</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">scripts</span><span class="o">/</span><span class="nx">MainContent</span><span class="p">.</span><span class="nx">js</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Footer</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">scripts</span><span class="o">/</span><span class="nx">Footer</span><span class="p">.</span><span class="nx">js</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">Page</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">getInitialState</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="nx">currentPage</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">index</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="p">};</span>
</span><span class='line'>  <span class="p">},</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">changeContent</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">currentPage</span> <span class="o">=</span> <span class="nx">next</span><span class="p">;</span>
</span><span class='line'>  <span class="p">},</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">MetadataHeader</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">PageHeader</span> <span class="o">/&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">SideMenu</span> <span class="nx">onClickMenu</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">changeContent</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">MainContent</span> <span class="nx">display</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">currentPage</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">Footer</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/body&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/html&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Doesn&rsquo;t look great? The best part is that any javascript that updates the DOM, MUST be placed inside the componente that renders the DOM. So it keeps organized and React will render only whatever is necessary.</p>

<p>Parent component can pass argumets to its children, arguments can be variables or a callback event. So a children component can notify other components when something happen.</p>

<h2>Extras points</h2>

<ul>
<li><strong>Official website:</strong> <a href="http://facebook.github.io/react/">http://facebook.github.io/react/</a></li>
<li><strong>Community:</strong> There are a good amount of free plugins available, take a look: <a href="http://react.rocks/">http://react.rocks/</a></li>
<li><strong>Cheatsheet:</strong> A good reference <a href="http://ricostacruz.com/cheatsheets/react.html">http://ricostacruz.com/cheatsheets/react.html</a></li>
<li><strong>Yeoman and generators</strong> This is a easy simple way to setup a new project, this generator will create gulp and it&rsquo;s test/preview/deploy pipeline for free <a href="https://github.com/randylien/generator-react-gulp-browserify">https://github.com/randylien/generator-react-gulp-browserify</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Promises]]></title>
    <link href="http://lgsanjos.github.io/blog/2015/09/10/understanding-promises/"/>
    <updated>2015-09-10T11:19:39-03:00</updated>
    <id>http://lgsanjos.github.io/blog/2015/09/10/understanding-promises</id>
    <content type="html"><![CDATA[<p>Promise is an specification to handle async calls. There are several ways to solve this problem a very popular solution is using callback arguments. In this article I will introduce promises and do a shallow comparison of both solutions.</p>

<!-- more -->


<h1>The problem</h1>

<p>Imagine you need to request some data from a server and once you have the response, you will format this data and display into the screen.</p>

<p>For the sake of simplicity and abstraction, let&rsquo;s consider:
- The method &ldquo;asyncRequest()&rdquo; that will request some data from an endpoint.
- Only success case for now, later on we add error handling.</p>

<h2>Using callback</h2>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">asyncRequest</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// success</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Using promises</h2>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">asyncRequest</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="c1">// success</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>So what?</h2>

<p>At first glance it&rsquo;s not a big change, but looking more carefully in fact what is happening on the promise example is that the asyncRequest is not triggering the callback function instead it is returning an object that implements the method <strong>then</strong>, and this object (which is called promise) will trigger once it&rsquo;s fullfilled.</p>

<p>Let&rsquo;s keep the baby steps and not dive too fast. So now that we have the response we need to validade this data sending this to another service, to do so we will call asynValidation(data).</p>

<h2>Using callback</h2>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">asyncRequest</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// asyncRequest succeded</span>
</span><span class='line'>  <span class="nx">asyncValidation</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// asyncValidation succeded</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Using promises</h2>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">asyncRequest</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">asyncValidation</span><span class="p">)</span>
</span><span class='line'>              <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                  <span class="c1">// asyncValidation succeded</span>
</span><span class='line'>              <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Whaaaaaaat?</h2>

<p>Now we are talking, so the benefit of delegating the event triggering is that you can build a chain of execution, and whatever asycnRequest return will be passed as argument to asyncValidation.</p>

<p>To better undestanding, let&rsquo;s think on a possible implementation of the asyncRequest method.</p>

<h2>Using callback</h2>

<p>Ok, this is such a bummer, but I don&rsquo;t want to mess up with any HTTP API, instead I will use a setTimeout to simulate an async process.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">asyncRequest</span> <span class="p">(</span><span class="nx">successCallback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// do the request using an API</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">response</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">some</span> <span class="nx">data</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>     <span class="nx">successCallback</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span> <span class="mi">2000</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Using promises</h2>

<p>The example below the variable <strong>q</strong> is a promise library, I will get into it below.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">asyncRequest</span> <span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// Create a deferred which is the object that will trigger the callback</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">deffered</span> <span class="o">=</span> <span class="nx">q</span><span class="p">.</span><span class="nx">deferred</span><span class="p">();</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">response</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">some</span> <span class="nx">data</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// here we say that the promise should be fullfilled as success</span>
</span><span class='line'>    <span class="nx">deffered</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span> <span class="mi">2000</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span> <span class="k">return</span> <span class="nx">deffered</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Enlightening</h2>

<p>The variable <strong>q</strong> is the library that implements a promise solution, when called .deferred it will create a <em>promise manager</em>, I know that&rsquo;s not the best name, but think that this manager owns the promise and also dictated if it will succeed or fail.</p>

<p>Notice that it returns <strong>deferred.promise</strong>, which is the promise itself. Yet there is no definition of success or fail, it is called <strong>pending promise</strong>.</p>

<p>Once the timeout executes the deferred will trigger <strong>.resolve(response)</strong> which is the way to say, this promise succeded, go on with the chain and use this response variable as parameter to the next method.</p>

<p>It means that as soon as the promise is resolved the <strong>then</strong> method will be invoked and it&rsquo;s function will be called.</p>

<h2>Chaining</h2>

<p>Chaining is only possible because the <strong>then</strong> method also retuns a promise, thats will be triggered automatically once it&rsquo;s function is done and it&rsquo;s return value will be carried over to the next function as parameter, so you can do thigs like:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">openSpinnerModal</span><span class="p">()</span>
</span><span class='line'>         <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">requestData</span><span class="p">)</span>
</span><span class='line'>         <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">validateData</span><span class="p">)</span>
</span><span class='line'>         <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">notifyUser</span><span class="p">)</span>
</span><span class='line'>         <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">closeSpinnerModal</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Failure handling example</h2>

<p>Adding a fail scenario to asyncRequest and asyncValidation.</p>

<h2>Using callback</h2>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">asyncRequest</span><span class="p">(</span>
</span><span class='line'>  <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// success callback for asyncRequest</span>
</span><span class='line'>   <span class="nx">asyncValidation</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>     <span class="c1">// success callback for asyncValidation</span>
</span><span class='line'>     <span class="p">},</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>       <span class="c1">//fail callback for asyncValidation</span>
</span><span class='line'>     <span class="p">})</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="kd">function</span> <span class="p">(</span><span class="nx">exception</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// fail callback for asyncRequest</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Refactoring to a little bit:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">failCallback</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">exception</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// fail callback for asyncRequest</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">successCallback</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">asyncValidation</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>     <span class="c1">// success callback</span>
</span><span class='line'>     <span class="p">},</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>       <span class="c1">//fail callback</span>
</span><span class='line'>     <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Using promises</h2>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">asyncRequest</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">asyncValidation</span><span class="p">,</span> <span class="nx">failCallbackForAsyncRequest</span><span class="p">)</span>
</span><span class='line'>             <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">successForAsyncValidation</span><span class="p">,</span> <span class="nx">failForAsyncValidation</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>OR</strong></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">asyncRequest</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">asyncValidation</span><span class="p">)</span>
</span><span class='line'>              <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">exception</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// Handle both failures here</span>
</span><span class='line'>              <span class="p">});</span><span class="o">&lt;</span><span class="nx">br</span><span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Shortest conclusion ever</h2>

<p>Chaining is a readable and expressive way to write code, I particularly keep using callbacks for very simple cases but when I notice that it requires me to execute one function after other, I go straight to chaining with promises.</p>

<p>Callbacks inside other callback is a problem well known as <strong>callback hell</strong> this is a good enough reason to give a try for promises.</p>

<p>Also there is much more the <strong>then</strong> and <strong>catch</strong> but it depends on the implementation you will use.
Another useful method is <strong>.finally()</strong> as it sounds like will always execute as the last element of the chain.</p>

<hr />

<h2>Links</h2>

<p>Hope you have enjoyed and be curious enough to take a look at the promise definition:</p>

<ul>
<li><p><strong>A+</strong> <a href="http://promisesaplus.com">http://promisesaplus.com</a></p></li>
<li><p>And some of it&rsquo;s implementations:</p>

<ul>
<li><strong>Kriskowal</strong> q: <a href="https://github.com/kriskowal/q">https://github.com/kriskowal/q</a></li>
<li><strong>AngularJS</strong> implementation $q: <a href="https://docs.angularjs.org/api/ng/service/$q">https://docs.angularjs.org/api/ng/service/$q</a></li>
<li>More <strong>references</strong> on: <a href="https://promisesaplus.com/implementations">https://promisesaplus.com/implementations</a></li>
</ul>
</li>
</ul>


<h2>Extra</h2>

<p>The original problem presented here is a piece of a general topic named &ldquo;Communicating Sequential Process&rdquo;, you can check more if it here <a href="https://en.wikipedia.org/wiki/Communicating_sequential_processes">https://en.wikipedia.org/wiki/Communicating_sequential_processes</a> and also some other solutions other than promises and callbacks are listed below.</p>
]]></content>
  </entry>
  
</feed>
