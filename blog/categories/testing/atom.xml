<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: testing | lgsanjos' Blog]]></title>
  <link href="http://lgsanjos.github.io/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://lgsanjos.github.io/"/>
  <updated>2016-01-28T09:56:35-02:00</updated>
  <id>http://lgsanjos.github.io/</id>
  <author>
    <name><![CDATA[lgsanjos]]></name>
    <email><![CDATA[lgsanjos@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setup Integration Tests with Capybara]]></title>
    <link href="http://lgsanjos.github.io/blog/2016/01/13/setup-integration-tests-from-scratch/"/>
    <updated>2016-01-13T22:13:26-02:00</updated>
    <id>http://lgsanjos.github.io/blog/2016/01/13/setup-integration-tests-from-scratch</id>
    <content type="html"><![CDATA[<p>This is a tutorial to setup an entire integration test project based on <strong>selenium</strong>, <strong>capybara</strong> and <strong>phantomjs</strong>. This is a purely black box text, so no matter the language you used on your website it should be helpful.</p>

<!-- more -->


<h2>First things first</h2>

<h3>Dependencies</h3>

<p>On an empty directory, let&rsquo;s create the Gemfile with a basic content, like:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">source</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://rubygems.org&quot;</span><span class="o">&gt;</span><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">rubygems</span><span class="o">.</span><span class="n">org</span><span class="o">&lt;</span><span class="sr">/a&gt;&amp;rsquo;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1">#specify here your ruby version</span>
</span><span class='line'>  <span class="n">ruby</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # Use the lastest version first, once it&amp;rsquo;s working fine update this file</span>
</span><span class='line'><span class="sr">  gem &amp;lsquo;cucumber&amp;rsquo;</span>
</span><span class='line'><span class="sr">  gem &amp;lsquo;selenium-webdriver&amp;rsquo;</span>
</span><span class='line'><span class="sr">  gem &amp;lsquo;poltergeist&amp;rsquo;</span>
</span><span class='line'><span class="sr">  gem &amp;lsquo;phantomjs&amp;rsquo;, :require =&gt; &amp;lsquo;phantomjs/</span><span class="n">poltergeist</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">rspec</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">capybara</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Save this file and type down on your terminal:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  bundle install
</span></code></pre></td></tr></table></div></figure></p>

<p>It is pretty standard, should be fine.</p>

<h3>Setup</h3>

<p>Cucumber is the test runner that will look for .feature files and step_definitions. The web thing is all related to selenium or poltegeist, don&rsquo;t bother with this right now, let&rsquo;s stick with the cucumber first.</p>

<p>On the terminal, type down:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  cucumber <span class="p">&amp;</span>ndash<span class="p">;</span>init
</span></code></pre></td></tr></table></div></figure></p>

<p>it should create a structure like this:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.
</span><span class='line'>├── Gemfile
</span><span class='line'>├── Gemfile.lock
</span><span class='line'>├── README.md
</span><span class='line'>└── features
</span><span class='line'>    ├── step_definitions
</span><span class='line'>    └── support
</span><span class='line'>        ├── env.rb
</span></code></pre></td></tr></table></div></figure></p>

<p>That is enough to run cucumber, of course we haven&rsquo;t written any tests so far but it&rsquo;s good to check the engines :). Type &ldquo;cucumber&rdquo; on your terminal and you should see this:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>-&gt; cucumber&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;0 scenarios
</span><span class='line'><span class="m">0</span> steps
</span><span class='line'>0m0.000s
</span></code></pre></td></tr></table></div></figure></p>

<h2>Writing the first scenario</h2>

<p>For the first scenario we won&rsquo;t touch the website yet, lets begin with a simple test and go throught the basics of cucumber.</p>

<h3>Creating the test file</h3>

<p>The tests should be placed on the feature folder. For the sake of simplicity we will write a test for the login feature (the most vanilla feature I can thing of).</p>

<p>Create a file named &ldquo;login.feature&rdquo; on the feature folder and write down a very simple scenario like this:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="k">Feature:</span><span class="nf"> Login&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nf">&lt;p&gt;  Scenario: Login failed</span>
</span><span class='line'><span class="nf">    Given I visit my website</span>
</span><span class='line'><span class="nf">    And I&amp;rsquo;m on the login page</span>
</span><span class='line'><span class="nf">    When I type down a wrong user credentials</span>
</span><span class='line'><span class="nf">    Then a failure modal shows up</span>
</span><span class='line'><span class="nf">    And I should see &amp;lsquo;Login failed&amp;rsquo; as error message</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This is a tipical example of cucumber scenario, if you run <strong>cucumber</strong> on terminal again, you will see that it found the test but there is no implementation of the step definiitons.</p>

<h3>Step definitions</h3>

<p>When you execute cucumber, its engine parses all the &ldquo;.feature&rdquo; files and for each step description it tries to match a step definition. As you can see there is already a folder named &ldquo;Step definitions&rdquo; where we will place them.</p>

<p>Create a file named <strong>login_steps.rb</strong> with this:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^I visit my website$/</span> <span class="k">do</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;And /</span><span class="o">^</span><span class="n">I</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">m</span> <span class="n">on</span> <span class="n">the</span> <span class="n">login</span> <span class="n">page</span><span class="vg">$/</span> <span class="k">do</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;When /</span><span class="o">^</span><span class="n">I</span> <span class="n">type</span> <span class="n">down</span> <span class="n">a</span> <span class="n">wrong</span> <span class="n">user</span> <span class="n">credentials</span><span class="vg">$/</span> <span class="k">do</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Then /</span><span class="o">^</span><span class="n">a</span> <span class="n">failure</span> <span class="n">modal</span> <span class="n">shows</span> <span class="n">up</span><span class="vg">$/</span> <span class="k">do</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;And /</span><span class="o">^</span><span class="n">I</span> <span class="n">should</span> <span class="n">see</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;(</span><span class="o">.</span><span class="n">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="n">as</span> <span class="n">error</span> <span class="n">message</span><span class="vg">$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">message</span><span class="o">|</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>As you can see, the definitions are matched by <strong>ruby regex</strong>, before we continue a few considerations:</p>

<ul>
<li><p>The prefix <strong>Given</strong>, <strong>When</strong>, <strong>Then</strong> not necessary need to match. But it would be good if it does :p</p></li>
<li><p>Whatever is inside the bars // is a regex pattern and you can research about ruby regex to understand better.</p>

<ul>
<li><p>The ^ means the <strong>string should start</strong> with that pattern.</p></li>
<li><p>The $ means the <strong>string should end</strong> with that pattern.</p></li>
<li><p>The . means <strong>any character</strong>.</p></li>
<li><p>The * means <strong>any amount of repetitions</strong>.</p></li>
</ul>
</li>
</ul>


<p>Now your tests should run successfully, because we have no implementations yet.</p>

<h2>Configuring Capybara</h2>

<h3>Env.rb</h3>

<p>This file will load before the tests execution, you should place here all the environment realted setup. Don&rsquo;t think of this as a hook to clean database or anything like that, later I&rsquo;ll show you a better place to do it.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">capybara</span><span class="o">/</span><span class="n">cucumber</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;this is will be important so rspec will use capybara&amp;rsquo;s matchers&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="kp">include</span> <span class="no">Capybara</span><span class="o">::</span><span class="no">Node</span><span class="o">::</span><span class="no">Matchers</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  driver = :selenium</span>
</span><span class='line'><span class="sr">  Capybara.configure do |config|</span>
</span><span class='line'><span class="sr">      config.app_host = &amp;lsquo;&lt;a href=&quot;http:/</span><span class="o">/</span><span class="n">yourdomain</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="s2">&quot;&gt;http://yourdomain.com/&lt;/a&gt;&amp;rsquo;</span>
</span><span class='line'><span class="s2">      config.run_server = false</span>
</span><span class='line'><span class="s2">      config.default_driver = driver</span>
</span><span class='line'><span class="s2">      config.current_driver = driver</span>
</span><span class='line'><span class="s2">      config.javascript_driver = driver</span>
</span><span class='line'><span class="s2">  end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This configuration is enough to setup capybara with the selenium webdriver and notice the variable <strong>run_server=false</strong> it means, your website should be running before you run the tests.</p>

<p>PS: The files inside support folder are standard ruby files, so you can add &ldquo;puts&rdquo;, read system variables, create function or simply require other files to better organize your settings.</p>

<h2>The driver</h2>

<h3>What it is?</h3>

<p>There are several complexities to communicate with the browser, each browser expose a different API, each platform has it&rsquo;s difference as well, so there are several abstractions to aliviate the developer of all this pain. The driver is one this abstraction on the browser level, so what you write in selenium running on firefox should run fine on chrome.</p>

<p>Capybara is another level of abstraction to handle multiple drivers also provides a DSL that is ruby-like and makes our life much easier.</p>

<h3>Your best friend: page</h3>

<p>Back to the test, each test scenario should to open the browser, load your URL and then comunicate with the loaded page. To do it we will use a global variable named <strong>page</strong>, it represents all the DOM and expose methods that you can interact with it.</p>

<p>Back on our step definitions, on the method &lsquo;I visit my Website&rsquo; add this (make sure to set your url).</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="n">visit</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://localhost:3000/&quot;</span><span class="o">&gt;</span><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="ss">localhost</span><span class="p">:</span><span class="mi">3000</span><span class="o">/&lt;</span><span class="sr">/a&gt;&amp;rsquo;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This command will open the browser and navigate to the specified URL.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_title</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">My</span> <span class="no">Title</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>   And here we are using the <strong>rspec</strong> matchers to help us assert the page title. The variable <strong>page</strong> is assigned after <strong>visit</strong> is called, so you must call first <strong>visit</strong>.</p>

<p><strong>Tip:</strong> I like to add this validation just after visiting a website, it will force the test to wait until the page is loaded so it will move on to the next step.</p>

<h3>The API</h3>

<p>I won&rsquo;t get in details here because there is a good documentation for Capybara and lot&rsquo;s of examples all over the internet, take a look on the following links and you should be fine.</p>

<ul>
<li><a href="http://www.rubydoc.info/github/jnicklas/capybara/master#navigating">Capybara DOCS</a></li>
<li><a href="https://github.com/jnicklas/capybara">Capybara examples</a></li>
</ul>


<h3>Example</h3>

<p>One possible way to implement all the steps is like this:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span><span class="p">(</span><span class="sr">/^I visit my webpage$/</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">visit</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="ss">hhtp</span><span class="p">:</span><span class="sr">//</span><span class="ss">localhost</span><span class="p">:</span><span class="mi">3000</span><span class="o">/&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;And(/</span><span class="o">^</span><span class="no">Iim</span> <span class="n">on</span> <span class="n">the</span> <span class="n">login</span> <span class="n">page</span><span class="vg">$/</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_title</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">Login</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;When(/</span><span class="o">^</span><span class="n">I</span> <span class="n">type</span> <span class="n">down</span> <span class="n">a</span> <span class="n">wrong</span> <span class="n">user</span> <span class="n">credentials</span><span class="vg">$/</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">fill_in</span> <span class="ss">:login</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">wrong</span> <span class="n">login</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fill_in</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">wrong</span> <span class="n">password</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">click_button</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">Sign</span> <span class="k">in</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Then(/</span><span class="o">^</span><span class="n">a</span> <span class="n">failure</span> <span class="n">modal</span> <span class="n">shows</span> <span class="n">up</span><span class="vg">$/</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_selector</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">.</span><span class="n">modal</span><span class="o">-</span><span class="n">dialog</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;And(/</span><span class="o">^</span><span class="n">I</span> <span class="n">should</span> <span class="n">see</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;(</span><span class="o">.</span><span class="n">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="n">as</span> <span class="n">error</span> <span class="n">message</span><span class="vg">$/</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">message</span><span class="o">|</span>
</span><span class='line'>    <span class="n">page</span><span class="o">.</span><span class="n">has_selector?</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">div</span><span class="c1">#error_message&amp;rsquo;, :text =&gt; message)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Bonus</h2>

<h3>Hooks</h3>

<p>To execute code <strong>before</strong> or <strong>after</strong> each scenario/test you can use hooks, by creating a file named hooks on the support folder, with the given content:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Before</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># runs before each scenario</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Before do |scenario|</span>
</span><span class='line'><span class="sr">  # Same as previous but receive the scenario as argument just in case you want to get the title or description.</span>
</span><span class='line'><span class="sr">  Rails.logger.debug &amp;ldquo;Starting scenario: </span><span class="si">#{</span><span class="n">scenario</span><span class="o">.</span><span class="n">title</span><span class="si">}</span><span class="sr">&amp;rdquo;</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">After</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># runs after each scenario</span>
</span><span class='line'>    <span class="c1"># For all hooks the scenario argument is optional, so it would work After do |scenario|  as well</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;BeforeStep</span>
</span><span class='line'><span class="sr">  # Do something before each step.</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">AfterStep</span>
</span><span class='line'>  <span class="c1"># Do something after each step.</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Around(&amp;lsquo;@fast&amp;rsquo;) do |scenario, block|</span>
</span><span class='line'><span class="sr">    block.call</span>
</span><span class='line'><span class="sr">    #It select all scenarios tagged as @fast and will execute the test when you execute block.call</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><a href="https://github.com/cucumber/cucumber/wiki/Hooks">Official documentation</a></p>

<h3>PhantomJS</h3>

<p>Tired of the browser poping up on your screen? Do you want to run it on a server with no UI? Headless browser are the solution, a very handy one is PhantomJS and it&rsquo;s driver Potergeist :P</p>

<p>To install PhantomJs follow this link <a href="http://phantomjs.org/">http://phantomjs.org/</a></p>

<p>Once it is installed, the setup we did above is enough to use it! Just change the <strong>env.rb</strong> file, assign the driver variable to <strong>:poltergesit</strong>.</p>

<p>It will run all the tests against a headless browser, it&rsquo;s much faster but you may have inconsistent results because it&rsquo;s a different browser.</p>

<h3>Page Objects</h3>

<p>As you write more and more tests, you will notice that there are duplications and the maintance becomes expensive, for instance if the page title has changed, now you need to update all the steps that assert the page title.</p>

<p><strong>Page Objects</strong> is a concept that everything related to a page whould be encapsulated into an object and the steps definition would interact only with this object.</p>

<p>Based on the example we did here, the implementation could be like this:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span><span class="p">(</span><span class="sr">/^I visit my webpage$/</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>   <span class="vi">@loginPage</span> <span class="o">=</span> <span class="no">LoginPage</span><span class="o">.</span><span class="n">visit</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;And(/</span><span class="o">^</span><span class="no">Iim</span> <span class="n">on</span> <span class="n">the</span> <span class="n">login</span> <span class="n">page</span><span class="vg">$/</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="vi">@loginPage</span><span class="o">.</span><span class="n">displayingCorrectTitle</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_truthy</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;When(/</span><span class="o">^</span><span class="n">I</span> <span class="n">type</span> <span class="n">down</span> <span class="n">a</span> <span class="n">wrong</span> <span class="n">user</span> <span class="n">credentials</span><span class="vg">$/</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@loginPage</span><span class="o">.</span><span class="n">login</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">wrong</span> <span class="n">login</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>    <span class="vi">@loginPage</span><span class="o">.</span><span class="n">password</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">wrong</span> <span class="n">password</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>    <span class="vi">@loginPage</span><span class="o">.</span><span class="n">sign_in</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Then(/</span><span class="o">^</span><span class="n">a</span> <span class="n">failure</span> <span class="n">modal</span> <span class="n">shows</span> <span class="n">up</span><span class="vg">$/</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="vi">@loginPage</span><span class="o">.</span><span class="n">showingErrorDialog?</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_truthy</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;And(/</span><span class="o">^</span><span class="n">I</span> <span class="n">should</span> <span class="n">see</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;(</span><span class="o">.</span><span class="n">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="n">as</span> <span class="n">error</span> <span class="n">message</span><span class="vg">$/</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">message</span><span class="o">|</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="vi">@loginPage</span><span class="o">.</span><span class="n">displayingCorrectErrorMessage?</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_truthy</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Don&rsquo;t take the nomeclature as guideline, but the idea of extracting all the interactions to a centralized object to each page you have. So updating this object will impact all the scenarios.</p>

<p>More about page objects here:</p>

<ul>
<li><a href="http://martinfowler.com/bliki/PageObject.html">Page Object Concept</a></li>
<li><a href="https://github.com/cheezy/page-object">A gem to help you</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
